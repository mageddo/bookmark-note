import java.nio.file.Files
import java.nio.file.Paths
import java.time.LocalDateTime
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

buildscript {
  repositories {
    mavenLocal()
  }
}
plugins {
  id "java"
  id "application"
  id "com.palantir.graal" version "0.4.0"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  maven { url "https://dl.bintray.com/micronaut/core-releases-local" }
  maven { url = 'https://oss.sonatype.org/service/local/repositories/releases/content' }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = "com.mageddo.Application"

graal {
  mainClass mainClassName
  graalVersion(graalVMVersion)
  outputName(project.name)
}
configurations {
  compile.exclude module: 'spring-jcl'
}

dependencies {

  annotationProcessor("io.micronaut:micronaut-validation:${micronautVersion}")

  compileOnly "io.micronaut:micronaut-inject-java:${micronautVersion}"
  annotationProcessor("io.micronaut:micronaut-inject-java:${micronautVersion}")

  compileOnly('com.mageddo:rsl:1.0.0')
  annotationProcessor("com.mageddo:rsl-compiler:1.0.1")

  compileOnly("com.mageddo.nativeimage:reflection-config-generator:2.1.1")
  annotationProcessor("com.mageddo.nativeimage:reflection-config-generator:2.1.1")

  compile("org.flywaydb:flyway-core:5.2.4")
  compile("com.zaxxer:HikariCP:3.3.1")
//	compile("org.xerial:sqlite-jdbc:3.27.2")
  compile("org.postgresql:postgresql:42.2.5")

  compile("org.springframework:spring-jdbc:5.1.5.RELEASE")
  compile("io.micronaut:micronaut-spring:${micronautVersion}")

  compile "io.micronaut:micronaut-validation:${micronautVersion}"
  compile "io.micronaut:micronaut-http-server-netty:${micronautVersion}"
  compile "io.micronaut:micronaut-runtime:${micronautVersion}"
  compile "io.micronaut:micronaut-inject:${micronautVersion}"

  compile("com.mageddo:commons:1.5.0")
  compile("org.apache.commons:commons-lang3:3.8.1")
  compile("io.micronaut:micronaut-views-thymeleaf:1.2.0")
  runtimeOnly("ch.qos.logback:logback-classic:1.2.3")

  compile("com.atlassian.commonmark:commonmark:0.13.1")
  compile("com.atlassian.commonmark:commonmark-ext-gfm-tables:0.13.1")

//	tag:graal[]
  compileOnly("com.oracle.substratevm:svm:19.2.1")
  annotationProcessor "io.micronaut:micronaut-graal:${micronautVersion}"
  compile("org.graalvm.sdk:graal-sdk:${graalVMVersion}")
  compile("commons-logging:commons-logging:1.2")
//	end:graal[]

  testAnnotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
  testCompileOnly('com.mageddo:rsl:1.0.0')
  testAnnotationProcessor('com.mageddo:rsl-compiler:1.0.1')

  testCompile "io.micronaut:micronaut-inject-java:${micronautVersion}"
  testCompile("io.micronaut.test:micronaut-test-junit5:1.0.2")
  testCompile('org.junit.jupiter:junit-jupiter:5.4.0')

  testCompile("io.rest-assured:rest-assured:3.3.0")
  testCompile("org.hamcrest:hamcrest:2.1")
  testCompile("org.skyscreamer:jsonassert:1.5.0")

}

task debug(type: JavaExec) {
  debug = true
  classpath = sourceSets.main.runtimeClasspath
  main = mainClassName
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  exclude '**/*IntTest*'
}

task intTest(type: Test) {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  outputs.upToDateWhen {
    false
  }
  include '**/*IntTest*'
  failFast = true
}

task copyStatics() {
  doLast {

    def binFilePath = "${project.buildDir}/graal/"
    def distPath = Paths.get("${binFilePath}/dist")

    deleteRecursively(distPath)

    /**
     * Copying static files
     */
    ant.copy(
        todir: "${binFilePath}/conf"
    ) {
      fileset(dir: "${project.sourceSets.main.output.resourcesDir}") {
        include(name: "db/**")
      }
    }

    /**
     * Create a distribution file
     */
    ant.zip(destfile: "${distPath}/${project.name}.zip") {
      zipfileset("dir": binFilePath)
    }
  }
}

nativeImage.finalizedBy(tasks.copyStatics)

static void deleteRecursively(java.nio.file.Path distPath) {
  Files.createDirectories(distPath)
  Files.walk(distPath)
      .sorted(Comparator.reverseOrder())
      .forEach({
        try {
          Files.deleteIfExists(it)
        } catch (IOException e) {
          throw new UncheckedIOException(e)
        }
      })
}

task heartbeat() {
  doLast() {
    Executors.newSingleThreadExecutor().submit({
      while (!Thread.currentThread().isInterrupted()) {
        println "${LocalDateTime.now()} ping"
        TimeUnit.MINUTES.sleep(1);
      }
    })
  }
}
