import java.nio.file.Files
import java.nio.file.Paths

buildscript {
	repositories {
		mavenLocal()
	}
}
plugins {
	id "java"
	id "application"
	id "com.palantir.graal" version "0.3.0-2-g6c49b4d"
	id "com.mageddo.graal-reflection-configuration-generator" version "2.0.1"
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = "com.mageddo.Application"

graal {
	mainClass mainClassName
	graalVersion(graalVMVersion)
	outputName("bookmark-notes")
	option("-H:IncludeResources=db/.*|static/.*|templates/.*|.*.yml|.*.xml|META-INF/http/.*|org/flywaydb/core/internal/database/postgresql/.*")
	option("-H:Log=registerResource")
	option("--allow-incomplete-classpath")
	option("-H:ReflectionConfigurationFiles=build/reflect.json,graal/micronaut.json")
	option("-H:+AllowVMInspection")
	option("--rerun-class-initialization-at-runtime=sun.security.jca.JCAUtil\$CachedSecureRandomHolder,javax.net.ssl.SSLContext")
	option("--delay-class-initialization-to-runtime=io.netty.handler.codec.http.HttpObjectEncoder,io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder,io.netty.handler.ssl.util.ThreadLocalInsecureRandom,com.sun.jndi.dns.DnsClient")
	option("-H:+ReportUnsupportedElementsAtRuntime")
	option("-H:EnableURLProtocols=http")
	option("-Dfile.encoding=UTF-8")
	option("-J-Xmx5G")
	option("--no-server")
}

dependencies {

	compile ("org.flywaydb:flyway-core:5.2.4")
	compile 'com.zaxxer:HikariCP:3.3.1'

//	compile("org.xerial:sqlite-jdbc:3.27.2")
	compile("org.postgresql:postgresql:42.2.5")

	compile ("org.springframework:spring-jdbc:5.1.5.RELEASE")
	compile ("io.micronaut:micronaut-spring:${micronautVersion}")

	annotationProcessor "io.micronaut:micronaut-validation:${micronautVersion}"
	compile "io.micronaut:micronaut-validation:${micronautVersion}"
	compile "io.micronaut:micronaut-http-client:${micronautVersion}"
	compile "io.micronaut:micronaut-http-server-netty:${micronautVersion}"
	compile "io.micronaut:micronaut-runtime:${micronautVersion}"

	annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
	compile "io.micronaut:micronaut-inject:${micronautVersion}"
	compileOnly "io.micronaut:micronaut-inject-java:${micronautVersion}"

	compile("com.mageddo:commons:1.2.0")
	compile("org.apache.commons:commons-lang3:3.8.1")

	compile ("io.micronaut:micronaut-views:${micronautVersion}")
	compile ('org.thymeleaf:thymeleaf:3.0.11.RELEASE')

	testAnnotationProcessor('com.mageddo:rsl-compiler:1.0.1')
	compile('com.mageddo:rsl:1.0.0')
	annotationProcessor('com.mageddo:rsl-compiler:1.0.1')

	compile ("com.mageddo:graal-reflection-configuration:2.0.0")
	compileOnly("com.oracle.substratevm:svm:${graalVMVersion}")
	runtime("io.micronaut:micronaut-graal:${micronautVersion}")
	compile("org.graalvm.sdk:graal-sdk:${graalVMVersion}")

	runtime "ch.qos.logback:logback-classic:1.2.3"
	implementation ("org.aspectj:aspectjrt:1.9.2")

	compile("com.atlassian.commonmark:commonmark:0.12.1")

	testAnnotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
	testCompile "io.micronaut:micronaut-inject-java:${micronautVersion}"
	testCompile("io.micronaut.test:micronaut-test-junit5:1.0.2")

	testCompile "junit:junit:4.12"
	testCompile('org.junit.jupiter:junit-jupiter:5.4.0')

	testCompile("io.rest-assured:rest-assured:3.3.0")
	testCompile("org.hamcrest:hamcrest:2.1")
	testCompile("org.skyscreamer:jsonassert:1.5.0")

}

task debug(type: JavaExec){
	debug = true
	classpath = sourceSets.main.runtimeClasspath
	main = mainClassName
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	exclude '**/*IntTest*'
}

task intTest (type: Test){
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	outputs.upToDateWhen {
		false
	}
	include '**/*IntTest*'
	failFast = true
}

task copyStatics() {
	doLast {

		def binFilePath = "${project.buildDir}/graal/"
		def distPath = Paths.get("${binFilePath}/dist")

		deleteRecursively(distPath)

		/**
		 * Copying static files
		 */
		ant.copy(
			todir: "${binFilePath}/conf"
		){
			fileset(dir: "${project.sourceSets.main.output.resourcesDir}"){
				include(name: "db/**")
			}
		}

		/**
		 * Create a distribution file
		 */
		ant.zip(destfile: "${distPath}/${project.name}.zip"){
			zipfileset("dir": binFilePath)
		}
	}
}

nativeImage.dependsOn(tasks.reflectConfigFiles)
nativeImage.finalizedBy(tasks.copyStatics)

static void deleteRecursively(java.nio.file.Path distPath) {
	Files.createDirectories(distPath)
	Files.walk(distPath)
		.sorted(Comparator.reverseOrder())
		.forEach({
		try {
			Files.deleteIfExists(it)
		} catch (IOException e) {
			throw new UncheckedIOException(e)
		}
	})
}
